(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{292:function(s,t,a){"use strict";a.r(t);var n=a(10),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("service 模块对应开发中的 service 层，或者说是 Spring 中的 "),t("code",[s._v("@Service")]),s._v(" 标记的类。")]),s._v(" "),t("p",[s._v("这一层基于 mapper 模块中的 "),t("code",[s._v("Mapper")]),s._v(" 接口，封装了大量开箱即用的 service 层方法。")]),s._v(" "),t("p",[s._v("在设计 service 接口时，考虑了微服务或 RPC 场景下的使用，因此像 "),t("code",[s._v("save")]),s._v(" 方法就进行了特殊的定义：")]),s._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * 保存（所有字段）\n *\n * @param entity 实体类\n * @return 返回保存成功后的实体，远程服务调用时，由于序列化和反序列化，入参和返回值不是同一个对象\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("save")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" entity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("方法注释中也有说明，最常见的场景中，调用 "),t("code",[s._v("save")]),s._v(" 方法时传递的 "),t("code",[s._v("entity")]),s._v(" 参数是个引用对象，\n"),t("code",[s._v("save")]),s._v(" 实现中对 "),t("code",[s._v("entity")]),s._v(" 的修改都会直接影响到调用的传入的引用对象，这种情况下的方法返回值可以直接是 "),t("code",[s._v("void")]),s._v(".")]),s._v(" "),t("p",[s._v("但是微服务中跨服务调用时，入参不是引用传递，而是通过序列化传递，服务端对参数的处理不会影响调用端，\n调用端想要得到修改后的对象，必须让服务端返回才行，服务端返回时也是先序列化，客户端反序列化，\n此时返回的结果和参数不是同一个对象，为了让接口方法更通用，就需要 "),t("code",[s._v("save")]),s._v(" 方法返回修改后的实体。")]),s._v(" "),t("p",[s._v("另外对于 service 方法操作数据库方法时，错误由 service 层直接判断，比如保存失败时，不是返回0，\n而是直接抛出异常：")]),s._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("save")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" entity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Assert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isTrue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("baseMapper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("insert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("entity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SAVE_FAILURE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" entity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("在上面代码中，通过断言（来自 common 包）判断 insert 是否成功，如果失败则抛出保存失败的异常：")]),s._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * 断言是否为真\n *\n * @param expression 布尔值\n * @param code       错误码\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isTrue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" expression"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Code")]),s._v(" code"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("expression"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AssertException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("code"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[t("code",[s._v("SAVE_FAILURE")]),s._v("的定义：")]),s._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Code")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SAVE_FAILURE")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Code")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"501"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"保存失败"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("下面详细介绍所有接口类的作用和方法的说明。")]),s._v(" "),t("h2",{attrs:{id:"_5-1-entityservice"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-entityservice"}},[s._v("#")]),s._v(" 5.1 "),t("code",[s._v("EntityService")])]),s._v(" "),t("p",[s._v("源码中的注释更详细，这里简单把接口列举一下：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("T save(T entity);")]),s._v(": 保存（所有字段）")]),s._v(" "),t("li",[t("code",[s._v("T saveSelective(T entity);")]),s._v(": 保存（非空字段，空的字段会使用数据库设置的默认值，但是不会字段反写）")]),s._v(" "),t("li",[t("code",[s._v("T update(T entity);")]),s._v(": 更新（所有字段）")]),s._v(" "),t("li",[t("code",[s._v("T updateSelective(T entity);")]),s._v(": 更新（非空字段）")]),s._v(" "),t("li",[t("code",[s._v("T updateSelective(T entity, Fn<T, Object>... forceUpdateFields);")]),s._v(": 更新（非空字段），指定的强制更新字段不区分是否为空")]),s._v(" "),t("li",[t("code",[s._v("boolean pkHasValue(T entity);")]),s._v(": 主键是否有值，"),t("strong",[s._v("用于判断对象更新或保存，建议重写为更高效的实现")])]),s._v(" "),t("li",[t("code",[s._v("T saveOrUpdate(T entity);")]),s._v(": 保存或更新（全部字段），当主键不存在时保存，存在时更新")]),s._v(" "),t("li",[t("code",[s._v("T saveOrUpdateSelective(T entity);")]),s._v(": 保存或更新（非空字段），当主键不存在时保存，存在时更新")]),s._v(" "),t("li",[t("code",[s._v("int delete(T entity);")]),s._v(": 根据当前类的值作为条件进行删除（注意：当所有字段都没有值时可能会清库）")]),s._v(" "),t("li",[t("code",[s._v("int deleteById(I id);")]),s._v(": 根据主键进行删除")]),s._v(" "),t("li",[t("code",[s._v("<F> int deleteByFieldList(Fn<T, F> field, List<F> fieldValueList);")]),s._v(": 根据指定字段集合删除")]),s._v(" "),t("li",[t("code",[s._v("T findById(I id);")]),s._v(": 根据指定的主键查询")]),s._v(" "),t("li",[t("code",[s._v("T findOne(T entity);")]),s._v(": 以当前类作为条件查询一个，当结果多于1个时出错")]),s._v(" "),t("li",[t("code",[s._v("List<T> findList(T entity);")]),s._v(": 以当前类作为条件查询")]),s._v(" "),t("li",[t("code",[s._v("<F> List<T> findByFieldList(Fn<T, F> field, List<F> fieldValueList);")]),s._v(": 根据指定字段集合查询")]),s._v(" "),t("li",[t("code",[s._v("List<T> findAll();")]),s._v(": 查询全部")]),s._v(" "),t("li",[t("code",[s._v("long count(T entity);")]),s._v(": 以当前类作为条件查询总数")])]),s._v(" "),t("p",[s._v("service 层的方法对 Mapper 方法又进行了一层简单包装，像 "),t("code",[s._v("T updateSelective(T entity, Fn<T, Object>... forceUpdateFields);")]),s._v("，\n这个方法比 Mapper 中下面的方法更容易理解：")]),s._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("updateByPrimaryKeySelectiveWithForceFields")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Param")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"entity"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" entity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Param")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fns"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Fn"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Fns")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" forceUpdateFields"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("还有一个特殊的 "),t("code",[s._v("boolean pkHasValue(T entity);")]),s._v(" 方法，"),t("strong",[s._v("这个方法用于判断对象更新或保存（saveOrUpdate），建议重写为更高效的实现")]),s._v("，例如重新为：")]),s._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pkHasValue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" entity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" user"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("这里写成了固定的 "),t("code",[s._v("User")]),s._v("，如果有一个统一的基类，用基类封装更高。")]),s._v(" "),t("h2",{attrs:{id:"_5-2-exampleservice"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-exampleservice"}},[s._v("#")]),s._v(" 5.2 "),t("code",[s._v("ExampleService")])]),s._v(" "),t("p",[s._v("源码中的注释更详细，这里简单把接口列举一下：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("default Example<T> example()")]),s._v("：获取 Example 对象")]),s._v(" "),t("li",[t("code",[s._v("int delete(Example<T> example);")]),s._v("：根据 example 条件批量删除")]),s._v(" "),t("li",[t("code",[s._v("int update(T entity, Example<T> example);")]),s._v("：根据 example 查询条件批量更新（所有字段）")]),s._v(" "),t("li",[t("code",[s._v("int updateSelective(T entity, Example<T> example);")]),s._v("：根据 example 查询条件批量更新（非空字段）")]),s._v(" "),t("li",[t("code",[s._v("T findOne(Example<T> example);")]),s._v("：根据 example 条件查询一个，当结果多于1个时出错")]),s._v(" "),t("li",[t("code",[s._v("List<T> findList(Example<T> example);")]),s._v("：根据 example 条件查询")]),s._v(" "),t("li",[t("code",[s._v("long count(Example<T> example);")]),s._v("：根据 example 查询总数")])]),s._v(" "),t("p",[s._v("特殊的只有一个方法，这个方法就是为了更方便的得到一个 "),t("code",[s._v("Example<T>")]),s._v(" 的实例，除此之外，你也可以自己 "),t("code",[s._v("new")]),s._v("，例如：")]),s._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Example")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" example "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Example")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("h2",{attrs:{id:"_5-3-baseservice"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-baseservice"}},[s._v("#")]),s._v(" 5.3 "),t("code",[s._v("BaseService")])]),s._v(" "),t("p",[t("code",[s._v("BaseService")]),s._v(" 中没有增加任何直接的方法，直接继承了上面两个接口：")]),s._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * 基础接口，包含实体类基本接口和 Example 接口\n * <p>\n * 自己的接口不一定要实现这个接口，直接继承会暴露过多的接口，\n * 可以直接在实现类中继承 AbstractService 实现，对外暴露的接口在自己接口中定义，\n * 自己定义的接口和 AbstractService 实现方法的定义一样时，不需要提供实现方法\n *\n * @param <T> 实体类类型\n * @param <I> 主键类型\n * @author liuzh\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BaseService")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("I")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Serializable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("EntityService")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("I")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExampleService")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("I")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("这里讨论一个设计上的决策。")]),s._v(" "),t("p",[s._v("当你只需要用到 "),t("code",[s._v("EntityService")]),s._v(" 中的方法时你可以只继承 "),t("code",[s._v("EntityService")]),s._v("，同理 "),t("code",[s._v("ExampleService")]),s._v("，\n当你两者都需要时，直接 "),t("code",[s._v("BaseService")]),s._v("。如果你只有单体应用的开发经验，在自己接口直接继承这些接口时，没有什么不妥的地方。\n当你有过微服务开发经验时，你应该发现不妥，微服务中的接口都是对外暴露的服务，如果不加思考的继承了这些 service 接口，\n你在无意中就对外暴露了大量的接口方法，这些方法的粒度太细，封装程度太低，极易出现各种方法的随便调用，极易产生分布式事务。")]),s._v(" "),t("p",[s._v("所以，在自己接口选择继承通用接口时，先看看自己是否需要暴露这么多的方法。")]),s._v(" "),t("p",[s._v("虽然这里提供了 3 个接口，但不是不假思索就使用的，如果不继承这些接口，这些接口还有什么用呢？")]),s._v(" "),t("p",[s._v("继续看下面的抽象类。")]),s._v(" "),t("h2",{attrs:{id:"_5-4-abstractservice"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-abstractservice"}},[s._v("#")]),s._v(" 5.4 "),t("code",[s._v("AbstractService")])]),s._v(" "),t("p",[t("code",[s._v("AbstractService")]),s._v(" 抽象类继承了 "),t("code",[s._v("BaseService")]),s._v("，实现了所有的接口方法，这个类是推荐拿来直接去用的，\n你可以让自己的实现类继承这个抽象类和自己的接口，当想对外暴露 "),t("code",[s._v("BaseService")]),s._v(" 现成方法时，只需要在自己接口中，\n按照相同的参数、返回值、方法名定义一个相同的方法即可，在实现类继承 "),t("code",[s._v("AbstractService")]),s._v(" 的情况下，\n如果不需要重新该接口方法，你的实现类中就不需要写任何代码。例如下面的用法：")]),s._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RoleService")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n   * 保存（所有字段）\n   *\n   * @param entity 实体类\n   * @return 返回保存成功后的实体，远程服务调用时，由于序列化和反序列化，入参和返回值不是同一个对象\n   */")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Role")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("save")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Role")]),s._v(" entity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n   * 更新（所有字段）\n   *\n   * @param entity 实体类\n   * @return 返回更新成功后的实体，远程服务调用时，由于序列化和反序列化，入参和返回值不是同一个对象\n   */")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Role")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("update")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Role")]),s._v(" entity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n   * 更新（非空字段），指定的强制更新字段不区分是否为空\n   *\n   * @param entity            实体类\n   * @param forceUpdateFields 强制更新的字段，不区分字段是否为 null\n   * @return 返回更新成功后的实体，远程服务调用时，由于序列化和反序列化，入参和返回值不是同一个对象\n   */")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Role")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("updateSelective")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Role")]),s._v(" entity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Fn")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Role")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" forceUpdateFields"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n   * 根据主键进行删除\n   *\n   * @param id 指定的主键\n   * @return 返回 1成功，0失败抛出异常\n   */")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("deleteById")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n   * 根据指定字段集合删除\n   *\n   * @param field          字段\n   * @param fieldValueList 字段值集合\n   * @param <F>            字段值类型\n   * @return 删除数据的条数\n   */")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("F")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("deleteByFieldList")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Fn")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Role")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("F")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" field"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("F")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" fieldValueList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n   * 根据指定的主键查询\n   *\n   * @param id 主键\n   * @return 实体\n   */")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Role")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("findById")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" id"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("上面定义了一个角色的接口，没有继承前面的 3 个接口，只提供了基本的增删改查方法。下面是对应的实现类：")]),s._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Service")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RoleServiceImpl")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AbstractService")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Role")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RoleMapper")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RoleService")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("实现类中没有任何代码，除非你需要修改已有方法的逻辑，否则就不需要任何代码。")]),s._v(" "),t("p",[s._v("以上面例子来简单说明方法定义的规则，在 "),t("code",[s._v("AbstractService")]),s._v(" 中定义的保存方法如下：")]),s._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("save")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" entity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Assert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("isTrue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("baseMapper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("insert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("entity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SAVE_FAILURE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" entity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("在 "),t("code",[s._v("RoleService")]),s._v(" 中对应的方法定义如下：")]),s._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * 保存（所有字段）\n *\n * @param entity 实体类\n * @return 返回保存成功后的实体，远程服务调用时，由于序列化和反序列化，入参和返回值不是同一个对象\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Role")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("save")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Role")]),s._v(" entity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("因为在继承 "),t("code",[s._v("AbstractService<Role, Integer, RoleMapper>")]),s._v(" 时指定了泛型的类型，因此这里的定义在抽象类中是存在对应实现的，\n因此就不需要自己实现。")])])}),[],!1,null,null,null);t.default=e.exports}}]);